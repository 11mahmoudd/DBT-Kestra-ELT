

id: gcp_taxi_scheduled_resume
namespace: zoomcamp
description: |
  this flow works on 2024 nyc data 

inputs:
  - id: taxi
    type: SELECT
    displayName: Select taxi type
    values: [yellow, green]
    defaults: green

variables:
  file: "{{inputs.taxi}}_tripdata_{{trigger.date | date('yyyy-MM')}}.parquet"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/{{vars.file}}"
  table: "{{kv('GCP_DATASET')}}.{{inputs.taxi}}_tripdata_{{trigger.date | date('yyyy_MM')}}"
  data: "{{outputs.extract.outputFiles[inputs.taxi ~ '_tripdata_' ~ (trigger.date | date('yyyy-MM')) ~ '.parquet']}}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      taxi: "{{inputs.taxi}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.parquet"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO {{render(vars.file)}} https://d37ci6vzurychx.cloudfront.net/trip-data/{{render(vars.file)}}

  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{render(vars.data)}}"
    to: "{{render(vars.gcs_file)}}"

    
  - id: log_upload
    type: io.kestra.plugin.core.log.Log
    message: "Uploaded file {{render(vars.gcs_file)}} to GCS"

  - id: if_yellow_taxi
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.taxi == 'yellow'}}"
    then:
      - id: bq_yellow_tripdata
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.yellow_tripdata`
          (
              unique_row_id BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing key trip attributes.'),
              filename STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'),
              VendorID INT64 OPTIONS (description = 'A code indicating the LPEP provider that provided the record.'),
              tpep_pickup_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was engaged.'),
              tpep_dropoff_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was disengaged.'),
              store_and_fwd_flag STRING OPTIONS (description = 'This flag indicates whether the trip record was held in vehicle memory before sending to the vendor.'),
              RatecodeID INT64 OPTIONS (description = 'The final rate code in effect at the end of the trip.'),
              PULocationID INT64 OPTIONS (description = 'TLC Taxi Zone in which the taximeter was engaged.'),
              DOLocationID INT64 OPTIONS (description = 'TLC Taxi Zone in which the taximeter was disengaged.'),
              passenger_count INT64 OPTIONS (description = 'The number of passengers in the vehicle. This is a driver-entered value.'),
              trip_distance FLOAT64 OPTIONS (description = 'The elapsed trip distance in miles reported by the taximeter.'),
              fare_amount FLOAT64 OPTIONS (description = 'The time-and-distance fare calculated by the meter.'),
              extra FLOAT64 OPTIONS (description = 'Miscellaneous extras and surcharges.'),
              mta_tax FLOAT64 OPTIONS (description = '$0.50 MTA tax that is automatically triggered based on the metered rate in use.'),
              tip_amount FLOAT64 OPTIONS (description = 'Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.'),
              tolls_amount FLOAT64 OPTIONS (description = 'Total amount of all tolls paid in trip.'),
              ehail_fee FLOAT64,
              improvement_surcharge FLOAT64 OPTIONS (description = '$0.30 improvement surcharge assessed on hailed trips at the flag drop.'),
              total_amount FLOAT64 OPTIONS (description = 'The total amount charged to passengers. Does not include cash tips.'),
              payment_type INT64 OPTIONS (description = 'A numeric code signifying how the passenger paid for the trip.'),
              trip_type INT64 OPTIONS (description = 'A code indicating whether the trip was a street-hail or a dispatch.'),
              congestion_surcharge FLOAT64 OPTIONS (description = 'Congestion surcharge applied to trips in congested zones.')
          )
          PARTITION BY DATE(tpep_pickup_datetime);

      - id: bq_yellow_table_ext
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`
          (
              VendorID INT64,
              tpep_pickup_datetime TIMESTAMP,
              tpep_dropoff_datetime TIMESTAMP,
              store_and_fwd_flag STRING,
              RatecodeID INT64,
              PULocationID INT64,
              DOLocationID INT64,
              passenger_count INT64,
              trip_distance FLOAT64,
              fare_amount FLOAT64,
              extra FLOAT64,
              mta_tax FLOAT64,
              tip_amount FLOAT64,
              tolls_amount FLOAT64,
              ehail_fee FLOAT64,
              improvement_surcharge FLOAT64,
              total_amount FLOAT64,
              payment_type INT64,
              trip_type INT64,
              congestion_surcharge FLOAT64
          )
          OPTIONS (
              format = 'PARQUET',
              uris = ['{{render(vars.gcs_file)}}']
          );


      - id: bq_yellow_table_tmp
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}`
          AS
          SELECT
            MD5(CONCAT(
              COALESCE(CAST(VendorID AS STRING), ""),
              COALESCE(CAST(tpep_pickup_datetime AS STRING), ""),
              COALESCE(CAST(tpep_dropoff_datetime AS STRING), ""),
              COALESCE(CAST(PULocationID AS STRING), ""),
              COALESCE(CAST(DOLocationID AS STRING), "")
            )) AS unique_row_id,
            "{{render(vars.file)}}" AS filename,
            *
          FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

      - id: bq_yellow_merge
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.yellow_tripdata` T
          USING `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}` S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
            INSERT (unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime, passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID, DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount, improvement_surcharge, total_amount, congestion_surcharge)
            VALUES (S.unique_row_id, S.filename, S.VendorID, S.tpep_pickup_datetime, S.tpep_dropoff_datetime, S.passenger_count, S.trip_distance, S.RatecodeID, S.store_and_fwd_flag, S.PULocationID, S.DOLocationID, S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.improvement_surcharge, S.total_amount, S.congestion_surcharge);

  - id: if_green_taxi
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.taxi == 'green'}}"
    then:
      - id: bq_green_tripdata
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.green_tripdata`
          (
              unique_row_id BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing key trip attributes.'),
              filename STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'),
              VendorID INT64 OPTIONS (description = 'A code indicating the LPEP provider that provided the record.'),
              lpep_pickup_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was engaged.'),
              lpep_dropoff_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was disengaged.'),
              store_and_fwd_flag STRING OPTIONS (description = 'This flag indicates whether the trip record was held in vehicle memory before sending to the vendor.'),
              RatecodeID INT64 OPTIONS (description = 'The final rate code in effect at the end of the trip.'),
              PULocationID INT64 OPTIONS (description = 'TLC Taxi Zone in which the taximeter was engaged.'),
              DOLocationID INT64 OPTIONS (description = 'TLC Taxi Zone in which the taximeter was disengaged.'),
              passenger_count INT64 OPTIONS (description = 'The number of passengers in the vehicle. This is a driver-entered value.'),
              trip_distance FLOAT64 OPTIONS (description = 'The elapsed trip distance in miles reported by the taximeter.'),
              fare_amount FLOAT64 OPTIONS (description = 'The time-and-distance fare calculated by the meter.'),
              extra FLOAT64 OPTIONS (description = 'Miscellaneous extras and surcharges.'),
              mta_tax FLOAT64 OPTIONS (description = '$0.50 MTA tax that is automatically triggered based on the metered rate in use.'),
              tip_amount FLOAT64 OPTIONS (description = 'Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.'),
              tolls_amount FLOAT64 OPTIONS (description = 'Total amount of all tolls paid in trip.'),
              ehail_fee FLOAT64,
              improvement_surcharge FLOAT64 OPTIONS (description = '$0.30 improvement surcharge assessed on hailed trips at the flag drop.'),
              total_amount FLOAT64 OPTIONS (description = 'The total amount charged to passengers. Does not include cash tips.'),
              payment_type INT64 OPTIONS (description = 'A numeric code signifying how the passenger paid for the trip.'),
              trip_type INT64 OPTIONS (description = 'A code indicating whether the trip was a street-hail or a dispatch.'),
              congestion_surcharge FLOAT64 OPTIONS (description = 'Congestion surcharge applied to trips in congested zones.')
          )
          PARTITION BY DATE(lpep_pickup_datetime);

      - id: bq_green_table_ext
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`
          (
              VendorID INT64,
              lpep_pickup_datetime TIMESTAMP,
              lpep_dropoff_datetime TIMESTAMP,
              store_and_fwd_flag STRING,
              RatecodeID INT64,
              PULocationID INT64,
              DOLocationID INT64,
              passenger_count INT64,
              trip_distance FLOAT64,
              fare_amount FLOAT64,
              extra FLOAT64,
              mta_tax FLOAT64,
              tip_amount FLOAT64,
              tolls_amount FLOAT64,
              ehail_fee FLOAT64,
              improvement_surcharge FLOAT64,
              total_amount FLOAT64,
              payment_type INT64,
              trip_type INT64,
              congestion_surcharge FLOAT64
          )
          OPTIONS (
              format = 'PARQUET',
              uris = ['{{render(vars.gcs_file)}}']
          );

      - id: bq_green_table_tmp
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}`
          AS
          SELECT
            MD5(CONCAT(
              COALESCE(CAST(VendorID AS STRING), ""),
              COALESCE(CAST(lpep_pickup_datetime AS STRING), ""),
              COALESCE(CAST(lpep_dropoff_datetime AS STRING), ""),
              COALESCE(CAST(PULocationID AS STRING), ""),
              COALESCE(CAST(DOLocationID AS STRING), "")
            )) AS unique_row_id,
            "{{render(vars.file)}}" AS filename,
            *
          FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

      - id: bq_green_merge
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.green_tripdata` T
          USING `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}` S
          ON T.unique_row_id = S.unique_row_id
          WHEN NOT MATCHED THEN
            INSERT (unique_row_id, filename, VendorID, lpep_pickup_datetime, lpep_dropoff_datetime, store_and_fwd_flag, RatecodeID, PULocationID, DOLocationID, passenger_count, trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount, ehail_fee, improvement_surcharge, total_amount, payment_type, trip_type, congestion_surcharge)
            VALUES (
              S.unique_row_id,
              S.filename,
              S.VendorID,
              S.lpep_pickup_datetime,
              S.lpep_dropoff_datetime,
              S.store_and_fwd_flag,
              S.RatecodeID,
              S.PULocationID,
              S.DOLocationID,
              S.passenger_count,
              S.trip_distance,
              S.fare_amount,
              S.extra,
              S.mta_tax,
              S.tip_amount,
              S.tolls_amount,
              S.ehail_fee,
              S.improvement_surcharge,
              S.total_amount,
              S.payment_type,
              S.trip_type,
              S.congestion_surcharge
          );

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: To avoid cluttering your storage, we will remove the downloaded files

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"

triggers:
  - id: green_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 5 1 * *"
    inputs:
      taxi: green

  - id: yellow_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 6 1 * *"
    inputs:
      taxi: yellow